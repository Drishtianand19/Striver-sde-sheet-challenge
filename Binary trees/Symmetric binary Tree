/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


//  Mirror means left looks loke right and right looks like left    [LEFT ---->  RIGHT]
//  Approach:
//  1. We will go to the left and right subtree of the root
//  2. Then apply preorder traversal to both the subtree
// Left tree-  Root   Left  Right
// Right tree- Root  Right  Left
 
class Solution {
    public boolean isSymmetric(TreeNode root) {

        if(root==null){
            return true;
        }
        return solve(root.left,root.right);
        
    }


    public boolean solve(TreeNode leftnode,TreeNode rightnode){

        if(leftnode==null || rightnode==null){
            return leftnode==rightnode;
        }


        if(leftnode.val!=rightnode.val){
            return false;
        }

        return solve(leftnode.left,rightnode.right) && solve(leftnode.right,rightnode.left);

    }
}
