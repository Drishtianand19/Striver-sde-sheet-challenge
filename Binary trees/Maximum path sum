/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {} 
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxPathSum(TreeNode root) {

        int maxvalue[]=new int[1];
        maxvalue[0]=Integer.MIN_VALUE;
        maxPath(root,maxvalue);
        return maxvalue[0];
        
    }

    public int maxPath(TreeNode node,int[] max){

        if(node==null){
            return 0;
        }
       //0 is to handle the negative sum 
        int leftsum=Math.max(0,maxPath(node.left,max));
        int rightsum=Math.max(0,maxPath(node.right,max));

      // Logic -  leftsum+rightsum+node.val and then keep updating that sum
        max[0]=Math.max(max[0],leftsum+rightsum+node.val);

        return node.val + Math.max(leftsum,rightsum);





    }
}
